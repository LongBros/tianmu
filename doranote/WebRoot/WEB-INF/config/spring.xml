<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd	
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
<!-- 引入jdbc配置文件 -->
	<context:property-placeholder location="/WEB-INF/config/jdbc.properties" ignore-unresolvable="true"/>
<!--创建jdbc数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${driver}"/>
		<property name="url" value="${url}"/>
		<property name="username" value="${username}"/>
		<property name="password" value="${password}"/>
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1"/>
		<property name="minIdle" value="1"/>
		<property name="maxActive" value="20"/>
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000"/>
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000"/>
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000"/>
		<property name="validationQuery" value="SELECT 'x'"/>
		<property name="testWhileIdle" value="true"/>
		<property name="testOnBorrow" value="false"/>
		<property name="testOnReturn" value="false"/>
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true"/>
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20"/>
	</bean>
	<!-- 输出可执行的SQL 未采用 org.slf4j.Logger;		而采用org.apache.log4j.Logger;-->
	<!-- <bean id="logFilter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
		<property name="resultSetLogEnabled" value="false" />
		<property name="statementExecutableSqlLogEnable" value="true" />
	</bean> -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="/WEB-INF/config/mybatis-config.xml"/><!-- 接口访问时，控制sql脚本输出 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:com/longbro/doranote/*/*.xml</value>
				<value>classpath:com/longbro/doranote/*/*/*.xml</value>
			</list>
		</property>
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
	</bean>

<!-- //映射器与适配器 -->
<!-- 	
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandler"></bean>
	<bean class=""></bean> 
-->
<!-- 自动实例化带@注释的实例 -->
	<mvc:annotation-driven></mvc:annotation-driven>
<!-- //设置扫描路径 -->
	<context:component-scan base-package="com.longbro.doranote.*"></context:component-scan>
	
	<bean id="controllerInterceptor" class="com.longbro.doranote.aop.ControllerInterceptor"></bean>
	<!-- 法1:配置文件中添加如下配置  法2：在controllerInterceptor添加注解-不知为何，暂时不行 	（两种方法皆需在头部引入命名空间即DTD解析文件）-->
	<aop:config>
		<aop:aspect ref="controllerInterceptor" order="1">
			<aop:pointcut id="logServiceCut" expression="execution (* com.longbro.doranote.controller..*(..))"/>
			<!-- 方法执行前 -->
			<aop:before pointcut-ref="logServiceCut" method="doBefore" />
			<aop:around pointcut-ref="logServiceCut" method="doAround"/>
			<aop:after pointcut-ref="logServiceCut" method="doAfter"/>
			<aop:after-throwing pointcut-ref="logServiceCut" method="doAfterThrowing"/>
			<!-- 方法执行结束后 -->
			<aop:after-returning pointcut-ref="logServiceCut" method="doAfterReturn" returning="returnValue"/>
		</aop:aspect>
	</aop:config>
	
	<!-- <mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<mvc:exclude-mapping path="/static/**" />
			<bean class="拦截器java代码路径"></bean>
		</mvc:interceptor>
	</mvc:interceptors> -->

	<!-- 跳转 jsp 时, 只写 jsp 名称 -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/" ></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	<!-- 上传文件 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
	    <property name="defaultEncoding" value="utf-8"/>  
	    <!-- 最大内存大小 -->  
	    <property name="maxInMemorySize" value="10240"/>  
	    <!-- 最大文件大小，-1为不限制大小 -->  
	    <property name="maxUploadSize" value="-1"/>  
    </bean>
    
	<context:property-placeholder location="/WEB-INF/config/system.properties" ignore-unresolvable="true"/>
	<!-- quartz定时器 -->
	<!-- <bean id="SpringQtzJobMethod" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="doraTimerJob"/>
		</property>
		<property name="targetMethod">
			<value>sayHello</value>
		</property>
		<property name="concurrent" value="false"/>
	</bean>
	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="SpringQtzJobMethod"></property>
		<property name="cronExpression" value="0 42 16 1 * ?"/>
	</bean>
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="cronTrigger"/>
			</list>
		</property>
	</bean> -->
	
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!--<bean id="doraTimerJob" class="com.longbro.doranote.job.DoraTimerJob"/>--><!-- 不需要的一行 -->
	<!-- 取消使用springTask实现定时任务，因在服务器上会产生多条记录（多域名导致初始化多个定时器） -->
     
    <task:scheduler id="qbScheduler" pool-size="10"/>
    <task:annotation-driven scheduler="qbScheduler" mode="proxy"/> 
    <!--简单来说，我们只需要<task:annotation-driven/>这一句即可，这些参数不是必须的 -->
    
    <!-- 10-02设置静态资源访问不经过前端控制器，而是直接访问资源 -->
    <mvc:resources mapping="/duola/**" location="/duola/" />
	<mvc:resources mapping="/hui/**" location="/hui/" />
	<mvc:resources mapping="/js/**" location="/js/" />
	<mvc:resources mapping="/css/**" location="/css/" />
	<mvc:resources mapping="/*.html" location="/" />
	<mvc:resources mapping="/*.jsp" location="/" />
</beans>